{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"debt_calculator_uni","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"SqDs7HTk5HIr","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","#local file C:\\Users\\ntemi\\Desktop\\columns.csv\n","# Load the Drive helper and mount\n","from google.colab import drive\n","drive.mount('/content/drive')\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"m75Dry1HJywY","colab_type":"code","colab":{}},"source":["\n","#read in csv of columns, dtypes - columns were manually trimmed\n","df_col=pd.read_csv(r'/content/drive/My Drive/Team-Project/Colab Notebooks/columns.csv')\n","df_col.set_index('col',inplace=True)\n","\n","#non-standard NA values in data set\n","na_set=['NULL','PrivacySuppressed']\n","\n","#select the target variable\n","target_y='D150_4'\n","\n","#create a dictionary of {column name: dtype}\n","type_dict=df_col.to_dict()['d_types']\n","\n","#read in csv of data set\n","df=pd.read_csv(r'/content/drive/My Drive/Team-Project/Colab Notebooks/checkdata2.csv',usecols=list(df_col.index.values),dtype=type_dict,na_values=na_set)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"MTk_q_1DBGXP","colab_type":"code","colab":{}},"source":["#select the target variable for \n","#get rid of any row with NaN as the target variable\n","df.dropna(subset=[target_y],inplace=True)\n","df.dropna(thresh=500,inplace=True)\n","df.dropna(thresh=2000,axis=1,inplace=True)\n","\n","#split X and y\n","X_w_nan=df.drop(target_y,axis=1)\n","y=df[target_y]\n","\n","#import multivariate imputer from sklearn\n","#WiP: it's experimental, no promises it works well\n","'''\n","from sklearn.experimental import enable_iterative_imputer\n","from sklearn.impute import IterativeImputer\n","\n","#impute missing values of X\n","imp=IterativeImputer().fit(X_w_nan)\n","X=imp.transform(X_w_nan)\n","'''\n","#import simple imputer in case the big one doesn't work\n","from sklearn.impute import SimpleImputer\n","\n","#impute missing values of X using the average value for each column\n","imp=SimpleImputer().fit(X_w_nan)\n","X=imp.transform(X_w_nan)\n","\n","\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ufUjk-sEvdWX","colab_type":"code","colab":{}},"source":["#scale data\n","from sklearn.preprocessing import StandardScaler\n","sc = StandardScaler()\n","X = pd.DataFrame(sc.fit_transform(X),columns=X_w_nan.columns)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bFeA-yNY6D70","colab_type":"code","outputId":"3d7bb7cd-fd94-493d-c1b6-3d5b5e19f69c","executionInfo":{"status":"ok","timestamp":1570514386767,"user_tz":420,"elapsed":832,"user":{"displayName":"Nathan Temiquel","photoUrl":"","userId":"01657354188638757810"}},"colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["from sklearn.decomposition import IncrementalPCA\n","transformer = IncrementalPCA(n_components=4, batch_size=200)\n","#let the fit function itself divide the data into batches\n","X_transformed = transformer.fit_transform(X,y)\n","\n","#This is here to check the covariance matrix\n","feature_relations=pd.DataFrame(transformer.components_,columns=X.columns,index=['pc0','pc1','pc2','pc3'])\n","\n","\n","#NEXT TO DO, FIND THE COLUMNS THAT IMPACT PCA THE MOST\n","priority_f_r=feature_relations.abs().sort_values(axis=1,ascending=False,by='pc0')\n","print(priority_f_r[priority_f_r.columns[0:6]].head())\n","#transformer.explained_variance_ratio_"],"execution_count":25,"outputs":[{"output_type":"stream","text":["     DEP_STAT_N  APPL_SCH_N     INC_N  FEMALE_YR2_N  LO_INC_DEBT_N  PELL_DEBT_N\n","pc0    0.071913    0.071913  0.071913      0.071837       0.071794     0.071672\n","pc1    0.036676    0.036676  0.036676      0.037484       0.037463     0.038582\n","pc2    0.001398    0.001398  0.001398      0.000217       0.001269     0.000090\n","pc3    0.008102    0.008102  0.008102      0.005472       0.004488     0.003316\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"0a1aIeC2OR4a","colab_type":"code","outputId":"c4e44944-fdc6-4fef-9150-c7786d9363ca","executionInfo":{"status":"ok","timestamp":1569976346320,"user_tz":420,"elapsed":12811,"user":{"displayName":"Nathan Temiquel","photoUrl":"","userId":"01657354188638757810"}},"colab":{"base_uri":"https://localhost:8080/","height":136}},"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X_transformed, y, test_size = 0.25, random_state = 0)\n","\n","from sklearn.ensemble import RandomForestRegressor\n","regressor = RandomForestRegressor(n_estimators=1000)\n","regressor.fit(X_train, y_train) "],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n","                      max_features='auto', max_leaf_nodes=None,\n","                      min_impurity_decrease=0.0, min_impurity_split=None,\n","                      min_samples_leaf=1, min_samples_split=2,\n","                      min_weight_fraction_leaf=0.0, n_estimators=1000,\n","                      n_jobs=None, oob_score=False, random_state=None,\n","                      verbose=0, warm_start=False)"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"code","metadata":{"id":"PUAVXV7waW25","colab_type":"code","outputId":"b440a432-146b-4abc-ef2a-5dd9385f6e76","executionInfo":{"status":"ok","timestamp":1569976348328,"user_tz":420,"elapsed":613,"user":{"displayName":"Nathan Temiquel","photoUrl":"","userId":"01657354188638757810"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["y_pred=regressor.predict(X_test)\n","\n","from sklearn.metrics import explained_variance_score\n","\n","print(explained_variance_score(y_test,y_pred))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["0.8195137891838522\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wBBToxdLfQqQ","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}